package Model;

import java.util.Random;

/**
 * The class Model.PlayingField implements the {@link PlayingField} of the memory game
 * as a two-dimensional array.
 * In addition, a controlArray of the boolean type is created to store
 * whether a card is revealed or not.
 */
public class PlayingField {

    /**
     * Height and Width of the {@link PlayingField}
     */
    //TODO This values are only for the Prototype,
    // later the values are generated by selecting the size of the {@link Model.PlayingField}
    private final int height = 4;
    private final int width = 4;

    /**
     * Array of the {@link PlayingField}
     */
    private static Card[][] board;

    /**
     * The Constructor creates a new {@link PlayingField} and fills the board with {@link Card}
     */
    public PlayingField() {
        board = new Card[height][width];
        fillWithCards();
    }

    /**
     * @return the {@code board}
     */
    public static Card[][] getBoard() {
        return board;
    }

    //TODO Setter of height and width should be implemented
    // in this Iteration they are redundant, because they are final.

    /**
     * Getter of the {@link PlayingField} {@code height}
     *
     * @return the {@code height}
     */
    public int getHeight() {
        return height;
    }

    /**
     * Getter of the {@link PlayingField} {@code width}
     *
     * @return the {@code width}
     */
    public int getWidth() {
        return width;
    }


    /**
     * Fills the {@code board} with {@link Card} elements.
     */
    private void fillWithCards() {
        CardValue[] allCardValues = CardValue.values();
        int counter = 0;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                board[i][j] = new Card(allCardValues[counter % allCardValues.length]);
                counter++;
            }
        }
        shuffleBoard();
    }

    /**
     * Shuffles {@link Card} elements of {@code board}.
     */
    private void shuffleBoard() {
        Card tmp;
        int randRow, randCol;
        Random r = new Random();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                randRow = r.nextInt(board.length - 1);
                randCol = r.nextInt(board.length - 1);
                tmp = board[i][j];
                board[i][j] = board[randRow][randCol];
                board[randRow][randCol] = tmp;
            }
        }
    }
}